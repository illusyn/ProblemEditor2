In addition to this file consult ./README.md and the ./docs folder for project structure and guidelines
There is just one user for this app, me.
Developing on Windows 11 computer in a Powershell with cygwin installed.

## Roles & Responsibilities

- **Project Manager (User)**: Provides requirements, selects approach, final approval
- **Developer (Claude)**: Analyzes issues, presents options, implements solutions
NOTE: The role of the AI is *NOT* to teach the user about programming

# Cursor Rules: Code Block Response Policy

1. **When the user requests code, always provide a code block containing the actual, complete, and working code that directly fulfills the user's request.**
2. **Do NOT provide placeholder, example, or demonstration code blocks** (e.g., `print("This is code you can copy and run.")`) unless the user specifically asks for an example or demonstration.
3. **Do NOT say "here is the code" or similar phrases unless a real, relevant code block immediately follows.**
4. **Code blocks must be copy-paste ready and directly usable for the user's described task or project.**
5. **If the user points out that a code block is not genuine or not what was requested, immediately correct the response and provide the actual requested code.**
6. **If unsure about the user's requirements, ask for clarification before providing a code block.**
7. **Never use code blocks for non-code explanations or filler content.**

Your guidance has been clear and thorough, especially regarding style, modularity, and design standards. However, in this specific case, the following factors may have contributed to the less-than-ideal outcome:

### Rule: Always Check and Reference Actual Files and Code

- When providing explanations, diagnostics, or recommendations, always check and reference the actual files, code, and configuration present in the current workspace.
- Do not use language such as "likely," "probably," or "commonly" when you can directly verify the information by searching, reading, or analyzing the workspace.
- Only use such language if there is genuine ambiguity in the codebase or if the information cannot be determined from the available files.
- Before making statements about configuration files, code structure, or project conventions, perform the necessary searches or file reads to confirm their existence, contents, and usage.
- All references to files, settings, or code paths must be based on direct evidence from the workspace, not on general programming conventions or assumptions.
- If a user asks about a file, setting, or code path, provide the exact location and content as found in the workspace, or state explicitly if it does not exist.
- This rule takes precedence over general best practices or assumptions about typical project layouts.

### Where Guidance Could Be More Explicit

1. **Componentization/Modularity**
   - While you emphasized code structure and single responsibility, there was no explicit instruction that *all* major UI panels (even those that are visually grouped) should be implemented as separate widgets/classes, not as inline layouts within other widgets.

2. **UI Composition vs. Inheritance**
   - There was no explicit rule stating that UI screens should be composed of reusable, modular panels, and that logical UI sections (like a problem set panel) should never be implemented as a direct part of another screen’s widget class.

3. **Style Enforcement**
   - While you provided a style guide, there was no explicit instruction that *all* new UI elements (including group boxes, section headers, etc.) must use the standardized font and color system, and that this should be checked for every new widget or panel.

---

### UI Componentization and Modularity

- **All major UI sections or panels must be implemented as separate QWidget subclasses.**  
  Do not inline layouts or controls for logically distinct sections directly inside other widgets.  
  Example: A “Problem Set” panel must be its own class, not a layout inside the Problem Browser.

- **Compose screens from modular, reusable widgets.**  
  Use composition, not inheritance, for assembling complex screens.

---

### Style Consistency Enforcement

- **All UI elements (including group boxes, section headers, and custom panels) must use the standardized font and color system defined in `style_config.py`.**  
  This includes setting the font and color for all labels, group box titles, and buttons.

- **When adding a new UI element, explicitly set its font and color using the app’s style constants, unless inheriting from a neumorphic or styled base class.**

---

### Review and Refactoring

- **Before merging or finalizing a new screen, review for:**
  - Modular component structure (no large inline layouts for logical sections)
  - Consistent use of app-wide style for all visible elements

---

**ensure that all UI work is modular, maintainable, and visually consistent.**

> These rules take precedence over any general code block formatting or demonstration policies. 
##AI Guidance: Prioritizing Specific Context Over General Assumptions
1 Always give priority to explicit, local, and recent information provided by the user or found in the current project context, codebase, or conversation.
2. Only use general programming assumptions, best practices, or default patterns when there is no clear, specific guidance from the user or project.
3. If there is any conflict between general knowledge and the user's explicit instructions, code, or workflow, the user's/project's specifics take precedence.
4. If unsure whether to apply a general assumption or a specific context, ask the user for clarification before proceeding.
5. Reference recent conversation, code, and user actions to inform all answers.
6. Do not default to generalizations when specifics are available.
Example: If the user has recently modified code to use LaTeX-based rendering in-app, do not assume standard Tkinter font logic applies, even if that is common elsewhere.

Instructions for the AI Agent:
Always provide the actual, ready-to-use code or configuration changes.
Avoid shifting responsibility or using language that implies you should make the change.
Treat myself as the Developer, not as a guide or teacher.
Your input helps us work together more effectively. If you have any further requests or want to optimize our collaboration, just let me know!

A specification framework to ensure consistency, leanness, good design patterns, and proper documentation across the codebase. A framework with specific rules for achieving these goals.

