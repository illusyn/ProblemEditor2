In addition to this file consult ./README.md and the ./docs folder for project structure and guidelines
There is just one user for this app, me.
Developing on Windows 11 computer in a Powershell with cywin installed.

## Roles & Responsibilities

- **Project Manager (User)**: Provides requirements, selects approach, final approval
- **Developer (Claude)**: Analyzes issues, presents options, implements solutions
NOTE: The role of the AI is *NOT* to teach the user about programming

# Cursor Rules: Code Block Response Policy

1. **When the user requests code, always provide a code block containing the actual, complete, and working code that directly fulfills the user's request.**
2. **Do NOT provide placeholder, example, or demonstration code blocks** (e.g., `print("This is code you can copy and run.")`) unless the user specifically asks for an example or demonstration.
3. **Do NOT say "here is the code" or similar phrases unless a real, relevant code block immediately follows.**
4. **Code blocks must be copy-paste ready and directly usable for the user's described task or project.**
5. **If the user points out that a code block is not genuine or not what was requested, immediately correct the response and provide the actual requested code.**
6. **If unsure about the user's requirements, ask for clarification before providing a code block.**
7. **Never use code blocks for non-code explanations or filler content.**

Your guidance has been clear and thorough, especially regarding style, modularity, and design standards. However, in this specific case, the following factors may have contributed to the less-than-ideal outcome:

---

### Where Guidance Could Be More Explicit

1. **Componentization/Modularity**
   - While you emphasized code structure and single responsibility, there was no explicit instruction that *all* major UI panels (even those that are visually grouped) should be implemented as separate widgets/classes, not as inline layouts within other widgets.

2. **UI Composition vs. Inheritance**
   - There was no explicit rule stating that UI screens should be composed of reusable, modular panels, and that logical UI sections (like a problem set panel) should never be implemented as a direct part of another screen’s widget class.

3. **Style Enforcement**
   - While you provided a style guide, there was no explicit instruction that *all* new UI elements (including group boxes, section headers, etc.) must use the standardized font and color system, and that this should be checked for every new widget or panel.

---

### UI Componentization and Modularity

- **All major UI sections or panels must be implemented as separate QWidget subclasses.**  
  Do not inline layouts or controls for logically distinct sections directly inside other widgets.  
  Example: A “Problem Set” panel must be its own class, not a layout inside the Problem Browser.

- **Compose screens from modular, reusable widgets.**  
  Use composition, not inheritance, for assembling complex screens.

---

### Style Consistency Enforcement

- **All UI elements (including group boxes, section headers, and custom panels) must use the standardized font and color system defined in `style_config.py`.**  
  This includes setting the font and color for all labels, group box titles, and buttons.

- **When adding a new UI element, explicitly set its font and color using the app’s style constants, unless inheriting from a neumorphic or styled base class.**

---

### Review and Refactoring

- **Before merging or finalizing a new screen, review for:**
  - Modular component structure (no large inline layouts for logical sections)
  - Consistent use of app-wide style for all visible elements

---

**ensure that all UI work is modular, maintainable, and visually consistent.**

> These rules take precedence over any general code block formatting or demonstration policies. 
##AI Guidance: Prioritizing Specific Context Over General Assumptions
1 Always give priority to explicit, local, and recent information provided by the user or found in the current project context, codebase, or conversation.
2. Only use general programming assumptions, best practices, or default patterns when there is no clear, specific guidance from the user or project.
3. If there is any conflict between general knowledge and the user's explicit instructions, code, or workflow, the user's/project's specifics take precedence.
4. If unsure whether to apply a general assumption or a specific context, ask the user for clarification before proceeding.
5. Reference recent conversation, code, and user actions to inform all answers.
6. Do not default to generalizations when specifics are available.
Example: If the user has recently modified code to use LaTeX-based rendering in-app, do not assume standard Tkinter font logic applies, even if that is common elsewhere.

Instructions for the AI Agent:
Always provide the actual, ready-to-use code or configuration changes.
Avoid shifting responsibility or using language that implies you should make the change.
Treat myself as the Developer, not as a guide or teacher.
Your input helps us work together more effectively. If you have any further requests or want to optimize our collaboration, just let me know!

A specification framework to ensure consistency, leanness, good design patterns, and proper documentation across the codebase. A framework with specific rules for achieving these goals.

# Math Editor Specification Framework

## 1. Code Structure and Organization

### Module Organization
- Each module must have a clear, single responsibility
- Group related functionality into logical packages
- Follow the existing directory structure:
  - Core modules in root directory
  - UI components in `/ui/`
  - Data handling in `/db/`
  - Converters in `/converters/`
  - Managers in `/managers/`

### File Structure
- Each file must begin with a module docstring explaining its purpose
- Import statements organized in order: standard library, third-party, local imports
- Class/function implementations in order of importance and dependency
- Maximum file length of 500 lines (break into smaller modules if needed)

## 2. Coding Style Conventions

### Naming Conventions
- Class names: `PascalCase`
- Methods/functions: `snake_case`
- Private methods/attributes: `_prefix_with_underscore`
- Constants: `ALL_CAPS`
- Module names: `lowercase_with_underscores`

### Documentation Standards
- All modules, classes, methods, and functions must have docstrings
- Docstring format: Google-style with Args, Returns, Raises sections
- Include parameter types and return types in docstrings
- Add inline comments for complex logic only, avoid redundant comments

### Code Formatting
- 4-space indentation (no tabs)
- Maximum line length of 100 characters
- Use vertical whitespace to separate logical blocks
- Follow PEP 8 style guidelines

## 3. Implementation Guidelines

### General Principles
- Favor composition over inheritance
- Design for testability
- Write code that is easy to understand rather than clever
- Use descriptive variable and function names

### Error Handling
- Use explicit error handling with try/except blocks
- Return tuple of (success, result/error_message) for operations that can fail
- Log errors with appropriate context information
- Display user-friendly error messages

### Lean Code Generation
- Implement only what is explicitly requested
- Avoid speculative features
- No placeholder code or "TODO" comments
- Limit file size to exactly what's needed

### UI Components
- Separate UI layout from functionality
- Use consistent padding and margins (5px standard, 10px for sections)
- Implement responsive layouts with proper weight distribution
- Add appropriate keyboard shortcuts for accessibility

## 4. Design Patterns and Architecture

### MVC Pattern Adaptation
- Separate data models from UI views
- Controllers (manager classes) coordinate between models and views
- Use event-driven communication where appropriate

### Component Communication
- Avoid tight coupling between components
- Use callback functions for component communication
- Store references to related components rather than global variables
- Maintain clear ownership of data

### State Management
- Clearly define where state is stored and modified
- Use dedicated manager classes for complex state
- Avoid unnecessary state duplication across components
- Implement proper state validation

## 5. Performance Considerations

### Resource Management
- Close database connections and file handles properly
- Use context managers where appropriate
- Release unnecessary resources when they're no longer needed
- Implement proper cleanup in destructors

### Efficiency Guidelines
- Avoid expensive operations in UI event handlers
- Implement lazy loading for database queries
- Cache results of expensive operations when appropriate
- Profile and optimize only when necessary

## 6. Testing and Quality Assurance

### Testability
- Design components with testable interfaces
- Provide mock implementations for external dependencies
- Clearly separate business logic from UI code to facilitate testing
- Add debugging code only when necessary and disable in production

### Code Quality Checks
- No unused imports or variables
- No duplicated code
- Functions should have a single responsibility
- Limit complexity of individual functions (maximum 30 lines)

## 7. Development Workflow

### Feature Implementation Process
1. Define the specific requirements and constraints
2. Design the solution with minimal modifications to existing code
3. Implement only what is requested and no more
4. Document all changes thoroughly
5. Test for edge cases and integration issues

### Incremental Development
- Implement one feature at a time
- Complete each feature fully before moving to the next
- Ensure backward compatibility with existing functionality
- Focus on minimal viable implementations

By following this specification framework, AI-generated code for the Math Editor project will be consistent, lean, well-designed, and properly documented, addressing the concerns you've identified.


