"""
Debug script to test LaTeX image inclusion syntax.
This will generate a simple LaTeX file with different image inclusion syntaxes.

Usage:
- python test_latex.py
"""

import os
import subprocess
from pathlib import Path
import sys

def create_test_latex_file(test_dir):
    """Create a test LaTeX file with different image inclusion syntaxes"""
    
    # Ensure directory exists
    os.makedirs(test_dir, exist_ok=True)
    
    # Create a test LaTeX file
    tex_file = os.path.join(test_dir, "test_latex.tex")
    
    # Create content with various image inclusion syntaxes
    content = r"""
\documentclass{article}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{amssymb}

% Set up image path
\graphicspath{{./}{./images/}}

\begin{document}

\section{Test Document}

This is a test document to debug LaTeX image inclusion.

\subsection{Version 1: Basic}
\begin{figure}[htbp]
    \centering
    \includegraphics{example.png}
    \caption{Basic image inclusion}
    \label{fig:basic}
\end{figure}

\subsection{Version 2: With width}
\begin{figure}[htbp]
    \centering
    \includegraphics[width=0.5\textwidth]{example.png}
    \caption{Image with width parameter}
    \label{fig:width}
\end{figure}

\subsection{Version 3: Using demo script style}
\begin{figure}[htbp]
    \centering
    \includegraphics[width=0.8\textwidth]{example.png}
    \caption{Demo script style}
    \label{fig:demo}
\end{figure}

\subsection{Version 4: Using direct string concatenation}

% This is generated by:
% latex = "\\begin{figure}[htbp]\n"
% latex += "    \\centering\n"
% latex += "    \\includegraphics[width=" + str(0.7) + "\\textwidth]{" + "example.png" + "}\n"
% latex += "    \\caption{" + "Direct concatenation" + "}\n"
% latex += "    \\label{" + "fig:concat" + "}\n"
% latex += "\\end{figure}\n"

\begin{figure}[htbp]
    \centering
    \includegraphics[width=0.7\textwidth]{example.png}
    \caption{Direct concatenation}
    \label{fig:concat}
\end{figure}

\subsection{Version 5: Using raw string style}

% This is generated by:
% begin_figure = r"\begin{figure}[htbp]"
% centering = r"\centering"
% includegraphics = r"\includegraphics[width=" + str(0.6) + r"\textwidth]{" + "example.png" + r"}"
% caption_line = r"\caption{" + "Raw string style" + r"}"
% label_line = r"\label{" + "fig:raw" + r"}"
% end_figure = r"\end{figure}"
% latex_parts = ["", begin_figure, "    " + centering, "    " + includegraphics, 
%               "    " + caption_line, "    " + label_line, end_figure, ""]
% latex = "\n".join(latex_parts)

\begin{figure}[htbp]
    \centering
    \includegraphics[width=0.6\textwidth]{example.png}
    \caption{Raw string style}
    \label{fig:raw}
\end{figure}

\end{document}
"""
    
    # Write to file
    with open(tex_file, "w", encoding="utf-8") as f:
        f.write(content)
    
    return tex_file

def create_test_image(test_dir):
    """Create a simple test image (if PIL is available)"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # Create image
        img = Image.new('RGB', (300, 200), color='white')
        d = ImageDraw.Draw(img)
        
        # Draw some shapes
        d.rectangle([(20, 20), (280, 180)], outline='black')
        d.ellipse([(50, 50), (250, 150)], outline='blue', fill='lightblue')
        
        # Add text
        d.text((100, 90), "Test Image", fill='black')
        
        # Save image
        img_path = os.path.join(test_dir, "example.png")
        img.save(img_path)
        print(f"Created test image: {img_path}")
        
    except ImportError:
        # If PIL is not available, create an empty file
        img_path = os.path.join(test_dir, "example.png")
        with open(img_path, "wb") as f:
            f.write(b"")
        print(f"Created empty test image file (PIL not available): {img_path}")

def compile_latex(tex_file, test_dir):
    """Compile the LaTeX file"""
    try:
        # Save current directory
        current_dir = os.getcwd()
        
        # Change to the test directory
        os.chdir(test_dir)
        
        # Get just the filename without path
        tex_filename = os.path.basename(tex_file)
        
        # Run pdflatex
        print(f"Compiling LaTeX file: {tex_filename}")
        result = subprocess.run(
            ["pdflatex", "-interaction=nonstopmode", tex_filename],
            capture_output=True,
            text=True
        )
        
        # Restore original directory
        os.chdir(current_dir)
        
        # Check if compilation was successful
        pdf_file = os.path.splitext(tex_file)[0] + ".pdf"
        if os.path.exists(pdf_file):
            print(f"Successfully compiled: {pdf_file}")
            return pdf_file
        else:
            print("LaTeX compilation failed.")
            print("Error output:")
            print(result.stdout)
            print(result.stderr)
            return None
    
    except Exception as e:
        print(f"Error compiling LaTeX: {str(e)}")
        return None

def main():
    """Main function"""
    # Create a test directory
    test_dir = os.path.join(os.getcwd(), "latex_debug_test")
    
    print(f"Creating test directory: {test_dir}")
    
    # Create a test LaTeX file
    tex_file = create_test_latex_file(test_dir)
    print(f"Created test LaTeX file: {tex_file}")
    
    # Create a test image
    create_test_image(test_dir)
    
    # Create images subdirectory and copy the test image there too
    images_dir = os.path.join(test_dir, "images")
    os.makedirs(images_dir, exist_ok=True)
    
    import shutil
    shutil.copy2(os.path.join(test_dir, "example.png"), os.path.join(images_dir, "example.png"))
    print(f"Copied test image to images subdirectory")
    
    # Compile the LaTeX file
    pdf_file = compile_latex(tex_file, test_dir)
    
    if pdf_file:
        print(f"\nSuccess! PDF created at: {pdf_file}")
        print("Please open the PDF to see which image inclusion syntax works correctly")
    
    print("\nTest script completed.")

if __name__ == "__main__":
    main()